(node:72782) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
Server is running on port 8082
(node:72782) NOTE: The AWS SDK for JavaScript (v2) is in maintenance mode.
 SDK releases are limited to address critical bug fixes and security issues only.

Please migrate your code to use AWS SDK for JavaScript (v3).
For more information, check the blog post at https://a.co/cUPnyil
开始处理任务请求
req.body.row: {
  'Unnamed: 0': null,
  task_name: 'kandeng_004',
  cityname: 'Ningkui_JYB01644-01',
  '刊登店铺': 'Ningkui',
  '系统SKU': 'JYB01644-01'
}
task_name: kandeng_004
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/taskExecutor_kandeng_004.js 已存在，不进行更新和替换
文件路径: /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js
开始处理任务请求
req.body.row: {
  'Unnamed: 0': null,
  task_name: 'kandeng_004',
  cityname: 'Ningkui_JYB01712',
  '刊登店铺': 'Ningkui',
  '系统SKU': 'JYB01712'
}
task_name: kandeng_004
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js 已存在，不进行更新和替换
importTasks called with: kandeng_004
Type of task_name: string
task_name stringified: "kandeng_004"
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/taskExecutor_kandeng_004.js 已存在，不进行更新和替换
文件路径: /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js 已存在，不进行更新和替换
importTasks called with: kandeng_004
Type of task_name: string
task_name stringified: "kandeng_004"
handleEventCode_check: 
///实现通过 e百的任务批量刊登工作流
import { ClickTask, InputTask, OutputTask, KeydownTask, NavigationTask, ScrollTask } from './taskExecutor_kandeng_004.js';

function getRandomInterval(min = 2000, max = 8000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

class LoopTask {
    constructor(loopEvents, loopCount, outputData) {
        this.loopEvents = loopEvents;
        this.outputData = outputData; 
        // this.i = i;  // 添加这一行
    }

    async execute(page, browser, index, sortedData_new, task_name, cityname, handleEvent) {

        const data = this.outputData || []; 
        for (let text of data) {
            // if (text === '西城区') {
            //     continue;
            // }
            console.log('Processing text:', text);

            try {
                // 确保页面完全加载
                await page.goto(page.url(), { waitUntil: 'load', timeout: 60000 });
                console.log('Page loaded.');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink_0 = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                if (foundLink_0) {
                    console.log('Link found for text:', text);

                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 3000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    // 获取总页数

                } else {
                    console.log(`没有找到文本为 "${text}" 的链接`);
                }
                // 等待一定时间确保页面渲染完成
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                
                console.log('page URL_check1:', page.url());
                if (foundLink) {
                    console.log('Link found for text:', text);
                    // 监听 'targetcreated' 事件
                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 5000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    const loopEvents = this.loopEvents || [];
                    console.log('task_name_1.1:', task_name);
                    console.log('cityname_1.1:', cityname);
                    page = await handleEvent(loopEvents[0], page, browser, index, sortedData_new, task_name, cityname);
                    await page.waitForSelector('.page a');
                    const totalPageNumber = await page.evaluate(() => {
                        let pageLinks = document.querySelectorAll('.page a');
                        return pageLinks.length > 0 ? parseInt(pageLinks[pageLinks.length - 2].innerText) : 1;
                    });

                    console.log('Total page number:', totalPageNumber);
                    // 获取总页数

                    // const loopCount = totalPageNumber || 1;
                    
                    // const date = new Date();
                    // const dateString = date.toISOString().replace(/:/g, '-'); // 将时间中的冒号替换为短横线，因为冒号在文件名中是非法的
                    // const filename = `output_${dateString}.xlsx`;

                    for (let i = 0; i < totalPageNumber; i++) {
                        for (const loopEvent of loopEvents) {
                            try {
                                console.log(`Executing loop event:`, loopEvent);
                                page = await handleEvent(loopEvent, page, browser, index, sortedData_new, task_name, cityname);
                            } catch (error) {
                                console.error(`An error occurred in the loop:`, error);
                            }
                        }

                        // const allHeaders = new Set();
                        // function collectHeaders(data, prefix = '') {
                        //     Object.keys(data).forEach(key => {
                        //         const fullKey = prefix ? `${prefix}_${key}` : key;
                        //         if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //             collectHeaders(data[key], fullKey);
                        //         } else {
                        //             allHeaders.add(fullKey);
                        //         }
                        //     });
                        // }


                        // // 遍历每个对象，收集所有可能的列名称
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         collectHeaders(data);
                        //     });
                        // });

                        // // 将所有列名称转换为数组
                        // const allHeadersArray = Array.from(allHeaders);

                        // // 创建一个新的工作簿和工作表
                        // const workbook = new Workbook();
                        // const worksheet = workbook.addWorksheet('Sheet1');

                        // // 添加标题行
                        // worksheet.addRow(allHeadersArray);


                        // // 增加随机时间间隔

                        // // 遍历每个对象，并构建数据行
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         const rowData = {};

                        //         function populateRowData(data, prefix = '') {
                        //             Object.keys(data).forEach(key => {
                        //                 const fullKey = prefix ? `${prefix}_${key}` : key;
                        //                 if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //                     populateRowData(data[key], fullKey);
                        //                 } else {
                        //                     rowData[fullKey] = data[key];
                        //                 }
                        //             });
                        //         }

                        //         populateRowData(data);

                        //         // 添加数据行
                        //         const row = allHeadersArray.map(header => rowData[header] || '');
                        //         worksheet.addRow(row);
                        //     });
                        // });
                        // // 写入 Excel 文件
                        // await workbook.xlsx.writeFile(filename)
                        //     .then(() => {
                        //         console.log('Excel 文件已成功创建！');
                        //     })
                        //     .catch(error => {
                        //         console.error('创建 Excel 文件时出错：', error);
                        //     });
                        // console.log('保存成功');

                        const randomInterval = getRandomInterval();
                        console.log(`Waiting for ${randomInterval} milliseconds before next loop iteration`);
                        await new Promise(resolve => setTimeout(resolve, randomInterval));

                    }
                
                } else {
                    console.log(`没有找到文本为" 的链接`);
                }
            } catch (error) {
                console.error(`An error occurred while processing text":`, error);
            }
        }
    
    }
}

export async function handleEvent(event, page, browser, index, sortedData_new, task_name, cityname) {
    let task;
    console.log('task_name_1:', task_name);
    console.log('cityname_1:', cityname);
    switch (event.type) {
        case 'click':
            task = new ClickTask(event.element, index, browser,task_name, cityname);
            break;
        case 'input':
            task = new InputTask(event.element, event.value, sortedData_new);
            break;
        case 'output':
            console.log('task_name_1.2:', task_name);
            console.log('cityname_1.2:', cityname);
            task = new OutputTask(event.element, event.value, sortedData_new,task_name, cityname);
            break;
        case 'loop':
            console.log('task_name_1.3:', task_name);
            console.log('cityname_1.3:', cityname);
            const outputTask = new OutputTask({ leixing: '自定义0' }, event.value, sortedData_new, task_name, cityname);
            await outputTask.execute(page);
            const outputData = outputTask.data;  // 直接访问 data 属性
            console.log('outputData:', outputData);
            task = new LoopTask(event.loopEvents, event.loopCount, outputData);  // 传递输出数据给 LoopTask
            console.log('task_name_1.4:', task_name);
            console.log('cityname_1.4:', cityname);
            await task.execute(page, browser, index, sortedData_new, task_name,cityname,handleEvent);
            return; // LoopTask already handles the execution of nested events
        case 'scroll':
            task = new ScrollTask(event.distance, event.direction);
            break;
        case 'navigation':
            task = new NavigationTask(event.url);
            break;
        case 'keydown':
            task = new KeydownTask(event.key);
            break;
        default:
            throw new Error(`Unsupported event type: ${event.type}`);
    }

    // Execute the task and check for a new page context
    const newPage = await task.execute(page);
    console.log('newPage URL:', newPage.url());
    console.log('page URL:', page.url());
    if (newPage !== page) {
        console.log('替换 page:');
        page = newPage;
    }
    return page;
}
task_name_0: kandeng_004
leixing: undefined
handleEventCode_check: 
///实现通过 e百的任务批量刊登工作流
import { ClickTask, InputTask, OutputTask, KeydownTask, NavigationTask, ScrollTask } from './taskExecutor_kandeng_004.js';

function getRandomInterval(min = 2000, max = 8000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

class LoopTask {
    constructor(loopEvents, loopCount, outputData) {
        this.loopEvents = loopEvents;
        this.outputData = outputData; 
        // this.i = i;  // 添加这一行
    }

    async execute(page, browser, index, sortedData_new, task_name, cityname, handleEvent) {

        const data = this.outputData || []; 
        for (let text of data) {
            // if (text === '西城区') {
            //     continue;
            // }
            console.log('Processing text:', text);

            try {
                // 确保页面完全加载
                await page.goto(page.url(), { waitUntil: 'load', timeout: 60000 });
                console.log('Page loaded.');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink_0 = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                if (foundLink_0) {
                    console.log('Link found for text:', text);

                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 3000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    // 获取总页数

                } else {
                    console.log(`没有找到文本为 "${text}" 的链接`);
                }
                // 等待一定时间确保页面渲染完成
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                
                console.log('page URL_check1:', page.url());
                if (foundLink) {
                    console.log('Link found for text:', text);
                    // 监听 'targetcreated' 事件
                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 5000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    const loopEvents = this.loopEvents || [];
                    console.log('task_name_1.1:', task_name);
                    console.log('cityname_1.1:', cityname);
                    page = await handleEvent(loopEvents[0], page, browser, index, sortedData_new, task_name, cityname);
                    await page.waitForSelector('.page a');
                    const totalPageNumber = await page.evaluate(() => {
                        let pageLinks = document.querySelectorAll('.page a');
                        return pageLinks.length > 0 ? parseInt(pageLinks[pageLinks.length - 2].innerText) : 1;
                    });

                    console.log('Total page number:', totalPageNumber);
                    // 获取总页数

                    // const loopCount = totalPageNumber || 1;
                    
                    // const date = new Date();
                    // const dateString = date.toISOString().replace(/:/g, '-'); // 将时间中的冒号替换为短横线，因为冒号在文件名中是非法的
                    // const filename = `output_${dateString}.xlsx`;

                    for (let i = 0; i < totalPageNumber; i++) {
                        for (const loopEvent of loopEvents) {
                            try {
                                console.log(`Executing loop event:`, loopEvent);
                                page = await handleEvent(loopEvent, page, browser, index, sortedData_new, task_name, cityname);
                            } catch (error) {
                                console.error(`An error occurred in the loop:`, error);
                            }
                        }

                        // const allHeaders = new Set();
                        // function collectHeaders(data, prefix = '') {
                        //     Object.keys(data).forEach(key => {
                        //         const fullKey = prefix ? `${prefix}_${key}` : key;
                        //         if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //             collectHeaders(data[key], fullKey);
                        //         } else {
                        //             allHeaders.add(fullKey);
                        //         }
                        //     });
                        // }


                        // // 遍历每个对象，收集所有可能的列名称
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         collectHeaders(data);
                        //     });
                        // });

                        // // 将所有列名称转换为数组
                        // const allHeadersArray = Array.from(allHeaders);

                        // // 创建一个新的工作簿和工作表
                        // const workbook = new Workbook();
                        // const worksheet = workbook.addWorksheet('Sheet1');

                        // // 添加标题行
                        // worksheet.addRow(allHeadersArray);


                        // // 增加随机时间间隔

                        // // 遍历每个对象，并构建数据行
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         const rowData = {};

                        //         function populateRowData(data, prefix = '') {
                        //             Object.keys(data).forEach(key => {
                        //                 const fullKey = prefix ? `${prefix}_${key}` : key;
                        //                 if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //                     populateRowData(data[key], fullKey);
                        //                 } else {
                        //                     rowData[fullKey] = data[key];
                        //                 }
                        //             });
                        //         }

                        //         populateRowData(data);

                        //         // 添加数据行
                        //         const row = allHeadersArray.map(header => rowData[header] || '');
                        //         worksheet.addRow(row);
                        //     });
                        // });
                        // // 写入 Excel 文件
                        // await workbook.xlsx.writeFile(filename)
                        //     .then(() => {
                        //         console.log('Excel 文件已成功创建！');
                        //     })
                        //     .catch(error => {
                        //         console.error('创建 Excel 文件时出错：', error);
                        //     });
                        // console.log('保存成功');

                        const randomInterval = getRandomInterval();
                        console.log(`Waiting for ${randomInterval} milliseconds before next loop iteration`);
                        await new Promise(resolve => setTimeout(resolve, randomInterval));

                    }
                
                } else {
                    console.log(`没有找到文本为" 的链接`);
                }
            } catch (error) {
                console.error(`An error occurred while processing text":`, error);
            }
        }
    
    }
}

export async function handleEvent(event, page, browser, index, sortedData_new, task_name, cityname) {
    let task;
    console.log('task_name_1:', task_name);
    console.log('cityname_1:', cityname);
    switch (event.type) {
        case 'click':
            task = new ClickTask(event.element, index, browser,task_name, cityname);
            break;
        case 'input':
            task = new InputTask(event.element, event.value, sortedData_new);
            break;
        case 'output':
            console.log('task_name_1.2:', task_name);
            console.log('cityname_1.2:', cityname);
            task = new OutputTask(event.element, event.value, sortedData_new,task_name, cityname);
            break;
        case 'loop':
            console.log('task_name_1.3:', task_name);
            console.log('cityname_1.3:', cityname);
            const outputTask = new OutputTask({ leixing: '自定义0' }, event.value, sortedData_new, task_name, cityname);
            await outputTask.execute(page);
            const outputData = outputTask.data;  // 直接访问 data 属性
            console.log('outputData:', outputData);
            task = new LoopTask(event.loopEvents, event.loopCount, outputData);  // 传递输出数据给 LoopTask
            console.log('task_name_1.4:', task_name);
            console.log('cityname_1.4:', cityname);
            await task.execute(page, browser, index, sortedData_new, task_name,cityname,handleEvent);
            return; // LoopTask already handles the execution of nested events
        case 'scroll':
            task = new ScrollTask(event.distance, event.direction);
            break;
        case 'navigation':
            task = new NavigationTask(event.url);
            break;
        case 'keydown':
            task = new KeydownTask(event.key);
            break;
        default:
            throw new Error(`Unsupported event type: ${event.type}`);
    }

    // Execute the task and check for a new page context
    const newPage = await task.execute(page);
    console.log('newPage URL:', newPage.url());
    console.log('page URL:', page.url());
    if (newPage !== page) {
        console.log('替换 page:');
        page = newPage;
    }
    return page;
}
task_name_0: kandeng_004
leixing: undefined
config: kn8o287
config: kn8o287
查询响应: { code: 0, msg: 'success', data: { status: 'Inactive' } }
浏览器未启动，尝试启动浏览器
查询响应: { code: 0, msg: 'success', data: { status: 'Inactive' } }
浏览器未启动，尝试启动浏览器
开始处理任务请求
req.body.row: {
  'Unnamed: 0': null,
  task_name: 'kandeng_004',
  cityname: 'Ningkui_JYB01644-01',
  '刊登店铺': 'Ningkui',
  '系统SKU': 'JYB01644-01'
}
task_name: kandeng_004
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/taskExecutor_kandeng_004.js 已存在，不进行更新和替换
文件路径: /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js 已存在，不进行更新和替换
importTasks called with: kandeng_004
Type of task_name: string
task_name stringified: "kandeng_004"
handleEventCode_check: 
///实现通过 e百的任务批量刊登工作流
import { ClickTask, InputTask, OutputTask, KeydownTask, NavigationTask, ScrollTask } from './taskExecutor_kandeng_004.js';

function getRandomInterval(min = 2000, max = 8000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

class LoopTask {
    constructor(loopEvents, loopCount, outputData) {
        this.loopEvents = loopEvents;
        this.outputData = outputData; 
        // this.i = i;  // 添加这一行
    }

    async execute(page, browser, index, sortedData_new, task_name, cityname, handleEvent) {

        const data = this.outputData || []; 
        for (let text of data) {
            // if (text === '西城区') {
            //     continue;
            // }
            console.log('Processing text:', text);

            try {
                // 确保页面完全加载
                await page.goto(page.url(), { waitUntil: 'load', timeout: 60000 });
                console.log('Page loaded.');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink_0 = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                if (foundLink_0) {
                    console.log('Link found for text:', text);

                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 3000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    // 获取总页数

                } else {
                    console.log(`没有找到文本为 "${text}" 的链接`);
                }
                // 等待一定时间确保页面渲染完成
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                
                console.log('page URL_check1:', page.url());
                if (foundLink) {
                    console.log('Link found for text:', text);
                    // 监听 'targetcreated' 事件
                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 5000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    const loopEvents = this.loopEvents || [];
                    console.log('task_name_1.1:', task_name);
                    console.log('cityname_1.1:', cityname);
                    page = await handleEvent(loopEvents[0], page, browser, index, sortedData_new, task_name, cityname);
                    await page.waitForSelector('.page a');
                    const totalPageNumber = await page.evaluate(() => {
                        let pageLinks = document.querySelectorAll('.page a');
                        return pageLinks.length > 0 ? parseInt(pageLinks[pageLinks.length - 2].innerText) : 1;
                    });

                    console.log('Total page number:', totalPageNumber);
                    // 获取总页数

                    // const loopCount = totalPageNumber || 1;
                    
                    // const date = new Date();
                    // const dateString = date.toISOString().replace(/:/g, '-'); // 将时间中的冒号替换为短横线，因为冒号在文件名中是非法的
                    // const filename = `output_${dateString}.xlsx`;

                    for (let i = 0; i < totalPageNumber; i++) {
                        for (const loopEvent of loopEvents) {
                            try {
                                console.log(`Executing loop event:`, loopEvent);
                                page = await handleEvent(loopEvent, page, browser, index, sortedData_new, task_name, cityname);
                            } catch (error) {
                                console.error(`An error occurred in the loop:`, error);
                            }
                        }

                        // const allHeaders = new Set();
                        // function collectHeaders(data, prefix = '') {
                        //     Object.keys(data).forEach(key => {
                        //         const fullKey = prefix ? `${prefix}_${key}` : key;
                        //         if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //             collectHeaders(data[key], fullKey);
                        //         } else {
                        //             allHeaders.add(fullKey);
                        //         }
                        //     });
                        // }


                        // // 遍历每个对象，收集所有可能的列名称
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         collectHeaders(data);
                        //     });
                        // });

                        // // 将所有列名称转换为数组
                        // const allHeadersArray = Array.from(allHeaders);

                        // // 创建一个新的工作簿和工作表
                        // const workbook = new Workbook();
                        // const worksheet = workbook.addWorksheet('Sheet1');

                        // // 添加标题行
                        // worksheet.addRow(allHeadersArray);


                        // // 增加随机时间间隔

                        // // 遍历每个对象，并构建数据行
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         const rowData = {};

                        //         function populateRowData(data, prefix = '') {
                        //             Object.keys(data).forEach(key => {
                        //                 const fullKey = prefix ? `${prefix}_${key}` : key;
                        //                 if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //                     populateRowData(data[key], fullKey);
                        //                 } else {
                        //                     rowData[fullKey] = data[key];
                        //                 }
                        //             });
                        //         }

                        //         populateRowData(data);

                        //         // 添加数据行
                        //         const row = allHeadersArray.map(header => rowData[header] || '');
                        //         worksheet.addRow(row);
                        //     });
                        // });
                        // // 写入 Excel 文件
                        // await workbook.xlsx.writeFile(filename)
                        //     .then(() => {
                        //         console.log('Excel 文件已成功创建！');
                        //     })
                        //     .catch(error => {
                        //         console.error('创建 Excel 文件时出错：', error);
                        //     });
                        // console.log('保存成功');

                        const randomInterval = getRandomInterval();
                        console.log(`Waiting for ${randomInterval} milliseconds before next loop iteration`);
                        await new Promise(resolve => setTimeout(resolve, randomInterval));

                    }
                
                } else {
                    console.log(`没有找到文本为" 的链接`);
                }
            } catch (error) {
                console.error(`An error occurred while processing text":`, error);
            }
        }
    
    }
}

export async function handleEvent(event, page, browser, index, sortedData_new, task_name, cityname) {
    let task;
    console.log('task_name_1:', task_name);
    console.log('cityname_1:', cityname);
    switch (event.type) {
        case 'click':
            task = new ClickTask(event.element, index, browser,task_name, cityname);
            break;
        case 'input':
            task = new InputTask(event.element, event.value, sortedData_new);
            break;
        case 'output':
            console.log('task_name_1.2:', task_name);
            console.log('cityname_1.2:', cityname);
            task = new OutputTask(event.element, event.value, sortedData_new,task_name, cityname);
            break;
        case 'loop':
            console.log('task_name_1.3:', task_name);
            console.log('cityname_1.3:', cityname);
            const outputTask = new OutputTask({ leixing: '自定义0' }, event.value, sortedData_new, task_name, cityname);
            await outputTask.execute(page);
            const outputData = outputTask.data;  // 直接访问 data 属性
            console.log('outputData:', outputData);
            task = new LoopTask(event.loopEvents, event.loopCount, outputData);  // 传递输出数据给 LoopTask
            console.log('task_name_1.4:', task_name);
            console.log('cityname_1.4:', cityname);
            await task.execute(page, browser, index, sortedData_new, task_name,cityname,handleEvent);
            return; // LoopTask already handles the execution of nested events
        case 'scroll':
            task = new ScrollTask(event.distance, event.direction);
            break;
        case 'navigation':
            task = new NavigationTask(event.url);
            break;
        case 'keydown':
            task = new KeydownTask(event.key);
            break;
        default:
            throw new Error(`Unsupported event type: ${event.type}`);
    }

    // Execute the task and check for a new page context
    const newPage = await task.execute(page);
    console.log('newPage URL:', newPage.url());
    console.log('page URL:', page.url());
    if (newPage !== page) {
        console.log('替换 page:');
        page = newPage;
    }
    return page;
}
task_name_0: kandeng_004
leixing: undefined
config: kn8o287
查询响应: { code: 0, msg: 'success', data: { status: 'Inactive' } }
浏览器未启动，尝试启动浏览器
启动响应: {
  code: 0,
  msg: 'success',
  data: {
    ws: {
      puppeteer: 'ws://127.0.0.1:52918/devtools/browser/0a883e25-9aba-4987-a4c3-221e86feaa74',
      selenium: '127.0.0.1:52918'
    },
    debug_port: '52918',
    webdriver: '/Users/zhanggongqing/Library/Application Support/adspower_global/cwd_global/chrome_131/chromedriver.app/Contents/MacOS/chromedriver'
  }
}
成功获取 WebSocket 端点，正在连接...
wsEndpoint: ws://127.0.0.1:52918/devtools/browser/0a883e25-9aba-4987-a4c3-221e86feaa74
modifiedWsEndpoint: ws://10.128.0.3:52918/devtools/browser/0a883e25-9aba-4987-a4c3-221e86feaa74
启动响应: {
  code: 0,
  msg: 'success',
  data: {
    ws: { puppeteer: '', selenium: '' },
    debug_port: '',
    webdriver: ''
  }
}
启动浏览器时出错: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
任务执行过程中发生错误: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
页面不存在，无需关闭
当前打开的页面数量: 4
启动响应: {
  code: 0,
  msg: 'success',
  data: {
    ws: { puppeteer: '', selenium: '' },
    debug_port: '',
    webdriver: ''
  }
}
启动浏览器时出错: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
任务执行过程中发生错误: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
页面不存在，无需关闭
rowscheck: [
  {
    'Unnamed: 0': null,
    task_name: 'kandeng_004',
    cityname: 'Ningkui_JYB01644-01',
    '刊登店铺': 'Ningkui',
    '系统SKU': 'JYB01644-01'
  }
]
cityname: Ningkui_JYB01644-01
task_name: kandeng_004
sortedData_new: [
  {
    url: 'https://salecentersaas.yibainetwork.com/#/product_list',
    time: '2024-06-04T09:57:28.808Z',
    type: 'navigation'
  },
  {
    element: {
      tagName: '',
      id: '',
      className: 'ivu-menu-submenu-title',
      innerText: '',
      leixing: '自定义1'
    },
    time: '2024-06-04T09:57:30.635Z',
    type: 'click'
  },
  {
    element: {
      tagName: 'TEXTAREA',
      id: '',
      className: 'ivu-input',
      name: '',
      innerText: '',
      placeholder: 'SKU'
    },
    value: '',
    time: '2024-06-04T09:57:46.401Z',
    type: 'click'
  },
  {
    element: {
      tagName: 'TEXTAREA',
      id: '',
      className: 'ivu-input',
      name: '',
      innerText: '',
      placeholder: 'SKU',
      value: '10230202',
      label: ''
    },
    value: 'JYB01644-01',
    time: '2024-06-04T09:57:46.612Z',
    type: 'input'
  },
  {
    element: {
      tagName: 'BUTTON',
      id: '',
      className: 'ivu-btn ivu-btn-primary',
      name: '',
      innerText: '查询'
    },
    value: '',
    time: '2024-06-04T09:57:47.541Z',
    type: 'click'
  },
  {
    element: { tagName: 'SPAN', id: '', className: '', innerText: '精细刊登' },
    time: '2024-06-04T09:57:49.547Z',
    type: 'click'
  },
  {
    element: { tagName: 'SPAN', id: '', className: '', innerText: '下一步' },
    time: '2024-06-04T09:57:51.210Z',
    type: 'click'
  },
  {
    element: {
      tagName: 'INPUT',
      id: '',
      className: 'ivu-select-input',
      name: '',
      innerText: 'Ningkui',
      placeholder: '请选择',
      leixing: '自定义2'
    },
    value: '刊登店铺',
    time: '2024-06-04T09:57:54.014Z',
    type: 'click'
  },
  {
    element: {
      tagName: 'SPAN',
      id: '',
      className: '',
      innerText: '一键检测侵权词/敏感词'
    },
    time: '2024-06-04T09:58:00.014Z',
    type: 'click'
  },
  {
    element: {
      tagName: 'INPUT',
      id: '',
      className: 'ivu-select-input',
      name: '',
      innerText: '',
      placeholder: '请选择',
      leixing: '自定义2.1'
    },
    time: '2024-06-04T09:58:03.014Z',
    type: 'click'
  },
  {
    element: { tagName: 'SPAN', id: '', className: '', innerText: '同步至未推送站点' },
    time: '2024-06-04T09:58:05.014Z',
    type: 'click'
  },
  {
    element: { tagName: 'SPAN', id: '', className: '', innerText: '翻译' },
    time: '2024-06-04T09:58:10.014Z',
    type: 'click'
  },
  {
    element: {
      tagName: 'INPUT',
      id: '',
      className: 'ivu-select-input',
      name: '',
      innerText: '',
      placeholder: '请选择',
      leixing: '自定义2.2'
    },
    time: '2024-06-04T09:58:13.014Z',
    type: 'click'
  },
  {
    element: { tagName: 'SPAN', id: '', className: '', innerText: '保存并提交所有站点' },
    time: '2024-06-04T09:58:20.014Z',
    type: 'click'
  },
  {
    element: {
      tagName: '',
      id: '',
      className: '',
      name: '',
      innerText: '',
      leixing: '自定义4'
    },
    time: '2024-06-04T09:58:30.014Z',
    type: 'output'
  }
]
正在处理事件: {
  url: 'https://salecentersaas.yibainetwork.com/#/product_list',
  time: '2024-06-04T09:57:28.808Z',
  type: 'navigation'
}
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
newPage URL: https://salecentersaas.yibainetwork.com/#/message_center
page URL: https://salecentersaas.yibainetwork.com/#/message_center
正在处理事件: {
  element: {
    tagName: '',
    id: '',
    className: 'ivu-menu-submenu-title',
    innerText: '',
    leixing: '自定义1'
  },
  time: '2024-06-04T09:57:30.635Z',
  type: 'click'
}
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
page URL: https://salecentersaas.yibainetwork.com/#/message_center
clickSelector: .ivu-menu-submenu-title
isXPath_click: false
leixing: 自定义1
点击“刊登管理”菜单项以展开子菜单
处理非循环事件 1 时出错: ProtocolError: Protocol error (Runtime.callFunctionOn): Promise was collected
    at new Callback (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/node_modules/puppeteer-core/lib/esm/puppeteer/common/Connection.js:58:35)
    at CallbackRegistry.create (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/node_modules/puppeteer-core/lib/esm/puppeteer/common/Connection.js:103:26)
    at Connection._rawSend (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/node_modules/puppeteer-core/lib/esm/puppeteer/common/Connection.js:212:26)
    at CDPSessionImpl.send (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/node_modules/puppeteer-core/lib/esm/puppeteer/common/Connection.js:419:78)
    at ExecutionContext._ExecutionContext_evaluate (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/node_modules/puppeteer-core/lib/esm/puppeteer/common/ExecutionContext.js:236:46)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async ExecutionContext.evaluate (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/node_modules/puppeteer-core/lib/esm/puppeteer/common/ExecutionContext.js:143:16)
正在处理事件: {
  element: {
    tagName: 'TEXTAREA',
    id: '',
    className: 'ivu-input',
    name: '',
    innerText: '',
    placeholder: 'SKU'
  },
  value: '',
  time: '2024-06-04T09:57:46.401Z',
  type: 'click'
}
Timeout waiting for new page
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
page URL: https://salecentersaas.yibainetwork.com/#/product_list
clickSelector: .ivu-input
isXPath_click: false
leixing: undefined
check_1
Timeout waiting for new page
check_2
newPage: null
check_3
newPage URL: https://salecentersaas.yibainetwork.com/#/product_list
page URL: https://salecentersaas.yibainetwork.com/#/product_list
正在处理事件: {
  element: {
    tagName: 'TEXTAREA',
    id: '',
    className: 'ivu-input',
    name: '',
    innerText: '',
    placeholder: 'SKU',
    value: '10230202',
    label: ''
  },
  value: 'JYB01644-01',
  time: '2024-06-04T09:57:46.612Z',
  type: 'input'
}
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
values: [ 'ivu-input' ]
inputSelector: .ivu-input
isXPath: false
newPage URL: https://salecentersaas.yibainetwork.com/#/product_list
page URL: https://salecentersaas.yibainetwork.com/#/product_list
正在处理事件: {
  element: {
    tagName: 'BUTTON',
    id: '',
    className: 'ivu-btn ivu-btn-primary',
    name: '',
    innerText: '查询'
  },
  value: '',
  time: '2024-06-04T09:57:47.541Z',
  type: 'click'
}
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
page URL: https://salecentersaas.yibainetwork.com/#/product_list
clickSelector: //button[text()='查询'] | //button/span[text()='查询']
isXPath_click: true
leixing: undefined
check_1
开始处理任务请求
req.body.row: {
  'Unnamed: 0': null,
  task_name: 'kandeng_004',
  cityname: 'Ningkui_JYB01724',
  '刊登店铺': 'Ningkui',
  '系统SKU': 'JYB01724'
}
task_name: kandeng_004
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/taskExecutor_kandeng_004.js 已存在，不进行更新和替换
文件路径: /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js
开始处理任务请求
req.body.row: {
  'Unnamed: 0': null,
  task_name: 'kandeng_004',
  cityname: 'Ningkui_JYB01712',
  '刊登店铺': 'Ningkui',
  '系统SKU': 'JYB01712'
}
task_name: kandeng_004
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js 已存在，不进行更新和替换
importTasks called with: kandeng_004
Type of task_name: string
task_name stringified: "kandeng_004"
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/taskExecutor_kandeng_004.js 已存在，不进行更新和替换
文件路径: /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js 已存在，不进行更新和替换
importTasks called with: kandeng_004
Type of task_name: string
task_name stringified: "kandeng_004"
handleEventCode_check: 
///实现通过 e百的任务批量刊登工作流
import { ClickTask, InputTask, OutputTask, KeydownTask, NavigationTask, ScrollTask } from './taskExecutor_kandeng_004.js';

function getRandomInterval(min = 2000, max = 8000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

class LoopTask {
    constructor(loopEvents, loopCount, outputData) {
        this.loopEvents = loopEvents;
        this.outputData = outputData; 
        // this.i = i;  // 添加这一行
    }

    async execute(page, browser, index, sortedData_new, task_name, cityname, handleEvent) {

        const data = this.outputData || []; 
        for (let text of data) {
            // if (text === '西城区') {
            //     continue;
            // }
            console.log('Processing text:', text);

            try {
                // 确保页面完全加载
                await page.goto(page.url(), { waitUntil: 'load', timeout: 60000 });
                console.log('Page loaded.');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink_0 = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                if (foundLink_0) {
                    console.log('Link found for text:', text);

                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 3000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    // 获取总页数

                } else {
                    console.log(`没有找到文本为 "${text}" 的链接`);
                }
                // 等待一定时间确保页面渲染完成
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                
                console.log('page URL_check1:', page.url());
                if (foundLink) {
                    console.log('Link found for text:', text);
                    // 监听 'targetcreated' 事件
                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 5000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    const loopEvents = this.loopEvents || [];
                    console.log('task_name_1.1:', task_name);
                    console.log('cityname_1.1:', cityname);
                    page = await handleEvent(loopEvents[0], page, browser, index, sortedData_new, task_name, cityname);
                    await page.waitForSelector('.page a');
                    const totalPageNumber = await page.evaluate(() => {
                        let pageLinks = document.querySelectorAll('.page a');
                        return pageLinks.length > 0 ? parseInt(pageLinks[pageLinks.length - 2].innerText) : 1;
                    });

                    console.log('Total page number:', totalPageNumber);
                    // 获取总页数

                    // const loopCount = totalPageNumber || 1;
                    
                    // const date = new Date();
                    // const dateString = date.toISOString().replace(/:/g, '-'); // 将时间中的冒号替换为短横线，因为冒号在文件名中是非法的
                    // const filename = `output_${dateString}.xlsx`;

                    for (let i = 0; i < totalPageNumber; i++) {
                        for (const loopEvent of loopEvents) {
                            try {
                                console.log(`Executing loop event:`, loopEvent);
                                page = await handleEvent(loopEvent, page, browser, index, sortedData_new, task_name, cityname);
                            } catch (error) {
                                console.error(`An error occurred in the loop:`, error);
                            }
                        }

                        // const allHeaders = new Set();
                        // function collectHeaders(data, prefix = '') {
                        //     Object.keys(data).forEach(key => {
                        //         const fullKey = prefix ? `${prefix}_${key}` : key;
                        //         if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //             collectHeaders(data[key], fullKey);
                        //         } else {
                        //             allHeaders.add(fullKey);
                        //         }
                        //     });
                        // }


                        // // 遍历每个对象，收集所有可能的列名称
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         collectHeaders(data);
                        //     });
                        // });

                        // // 将所有列名称转换为数组
                        // const allHeadersArray = Array.from(allHeaders);

                        // // 创建一个新的工作簿和工作表
                        // const workbook = new Workbook();
                        // const worksheet = workbook.addWorksheet('Sheet1');

                        // // 添加标题行
                        // worksheet.addRow(allHeadersArray);


                        // // 增加随机时间间隔

                        // // 遍历每个对象，并构建数据行
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         const rowData = {};

                        //         function populateRowData(data, prefix = '') {
                        //             Object.keys(data).forEach(key => {
                        //                 const fullKey = prefix ? `${prefix}_${key}` : key;
                        //                 if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //                     populateRowData(data[key], fullKey);
                        //                 } else {
                        //                     rowData[fullKey] = data[key];
                        //                 }
                        //             });
                        //         }

                        //         populateRowData(data);

                        //         // 添加数据行
                        //         const row = allHeadersArray.map(header => rowData[header] || '');
                        //         worksheet.addRow(row);
                        //     });
                        // });
                        // // 写入 Excel 文件
                        // await workbook.xlsx.writeFile(filename)
                        //     .then(() => {
                        //         console.log('Excel 文件已成功创建！');
                        //     })
                        //     .catch(error => {
                        //         console.error('创建 Excel 文件时出错：', error);
                        //     });
                        // console.log('保存成功');

                        const randomInterval = getRandomInterval();
                        console.log(`Waiting for ${randomInterval} milliseconds before next loop iteration`);
                        await new Promise(resolve => setTimeout(resolve, randomInterval));

                    }
                
                } else {
                    console.log(`没有找到文本为" 的链接`);
                }
            } catch (error) {
                console.error(`An error occurred while processing text":`, error);
            }
        }
    
    }
}

export async function handleEvent(event, page, browser, index, sortedData_new, task_name, cityname) {
    let task;
    console.log('task_name_1:', task_name);
    console.log('cityname_1:', cityname);
    switch (event.type) {
        case 'click':
            task = new ClickTask(event.element, index, browser,task_name, cityname);
            break;
        case 'input':
            task = new InputTask(event.element, event.value, sortedData_new);
            break;
        case 'output':
            console.log('task_name_1.2:', task_name);
            console.log('cityname_1.2:', cityname);
            task = new OutputTask(event.element, event.value, sortedData_new,task_name, cityname);
            break;
        case 'loop':
            console.log('task_name_1.3:', task_name);
            console.log('cityname_1.3:', cityname);
            const outputTask = new OutputTask({ leixing: '自定义0' }, event.value, sortedData_new, task_name, cityname);
            await outputTask.execute(page);
            const outputData = outputTask.data;  // 直接访问 data 属性
            console.log('outputData:', outputData);
            task = new LoopTask(event.loopEvents, event.loopCount, outputData);  // 传递输出数据给 LoopTask
            console.log('task_name_1.4:', task_name);
            console.log('cityname_1.4:', cityname);
            await task.execute(page, browser, index, sortedData_new, task_name,cityname,handleEvent);
            return; // LoopTask already handles the execution of nested events
        case 'scroll':
            task = new ScrollTask(event.distance, event.direction);
            break;
        case 'navigation':
            task = new NavigationTask(event.url);
            break;
        case 'keydown':
            task = new KeydownTask(event.key);
            break;
        default:
            throw new Error(`Unsupported event type: ${event.type}`);
    }

    // Execute the task and check for a new page context
    const newPage = await task.execute(page);
    console.log('newPage URL:', newPage.url());
    console.log('page URL:', page.url());
    if (newPage !== page) {
        console.log('替换 page:');
        page = newPage;
    }
    return page;
}
task_name_0: kandeng_004
leixing: undefined
handleEventCode_check: 
///实现通过 e百的任务批量刊登工作流
import { ClickTask, InputTask, OutputTask, KeydownTask, NavigationTask, ScrollTask } from './taskExecutor_kandeng_004.js';

function getRandomInterval(min = 2000, max = 8000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

class LoopTask {
    constructor(loopEvents, loopCount, outputData) {
        this.loopEvents = loopEvents;
        this.outputData = outputData; 
        // this.i = i;  // 添加这一行
    }

    async execute(page, browser, index, sortedData_new, task_name, cityname, handleEvent) {

        const data = this.outputData || []; 
        for (let text of data) {
            // if (text === '西城区') {
            //     continue;
            // }
            console.log('Processing text:', text);

            try {
                // 确保页面完全加载
                await page.goto(page.url(), { waitUntil: 'load', timeout: 60000 });
                console.log('Page loaded.');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink_0 = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                if (foundLink_0) {
                    console.log('Link found for text:', text);

                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 3000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    // 获取总页数

                } else {
                    console.log(`没有找到文本为 "${text}" 的链接`);
                }
                // 等待一定时间确保页面渲染完成
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                
                console.log('page URL_check1:', page.url());
                if (foundLink) {
                    console.log('Link found for text:', text);
                    // 监听 'targetcreated' 事件
                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 5000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    const loopEvents = this.loopEvents || [];
                    console.log('task_name_1.1:', task_name);
                    console.log('cityname_1.1:', cityname);
                    page = await handleEvent(loopEvents[0], page, browser, index, sortedData_new, task_name, cityname);
                    await page.waitForSelector('.page a');
                    const totalPageNumber = await page.evaluate(() => {
                        let pageLinks = document.querySelectorAll('.page a');
                        return pageLinks.length > 0 ? parseInt(pageLinks[pageLinks.length - 2].innerText) : 1;
                    });

                    console.log('Total page number:', totalPageNumber);
                    // 获取总页数

                    // const loopCount = totalPageNumber || 1;
                    
                    // const date = new Date();
                    // const dateString = date.toISOString().replace(/:/g, '-'); // 将时间中的冒号替换为短横线，因为冒号在文件名中是非法的
                    // const filename = `output_${dateString}.xlsx`;

                    for (let i = 0; i < totalPageNumber; i++) {
                        for (const loopEvent of loopEvents) {
                            try {
                                console.log(`Executing loop event:`, loopEvent);
                                page = await handleEvent(loopEvent, page, browser, index, sortedData_new, task_name, cityname);
                            } catch (error) {
                                console.error(`An error occurred in the loop:`, error);
                            }
                        }

                        // const allHeaders = new Set();
                        // function collectHeaders(data, prefix = '') {
                        //     Object.keys(data).forEach(key => {
                        //         const fullKey = prefix ? `${prefix}_${key}` : key;
                        //         if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //             collectHeaders(data[key], fullKey);
                        //         } else {
                        //             allHeaders.add(fullKey);
                        //         }
                        //     });
                        // }


                        // // 遍历每个对象，收集所有可能的列名称
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         collectHeaders(data);
                        //     });
                        // });

                        // // 将所有列名称转换为数组
                        // const allHeadersArray = Array.from(allHeaders);

                        // // 创建一个新的工作簿和工作表
                        // const workbook = new Workbook();
                        // const worksheet = workbook.addWorksheet('Sheet1');

                        // // 添加标题行
                        // worksheet.addRow(allHeadersArray);


                        // // 增加随机时间间隔

                        // // 遍历每个对象，并构建数据行
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         const rowData = {};

                        //         function populateRowData(data, prefix = '') {
                        //             Object.keys(data).forEach(key => {
                        //                 const fullKey = prefix ? `${prefix}_${key}` : key;
                        //                 if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //                     populateRowData(data[key], fullKey);
                        //                 } else {
                        //                     rowData[fullKey] = data[key];
                        //                 }
                        //             });
                        //         }

                        //         populateRowData(data);

                        //         // 添加数据行
                        //         const row = allHeadersArray.map(header => rowData[header] || '');
                        //         worksheet.addRow(row);
                        //     });
                        // });
                        // // 写入 Excel 文件
                        // await workbook.xlsx.writeFile(filename)
                        //     .then(() => {
                        //         console.log('Excel 文件已成功创建！');
                        //     })
                        //     .catch(error => {
                        //         console.error('创建 Excel 文件时出错：', error);
                        //     });
                        // console.log('保存成功');

                        const randomInterval = getRandomInterval();
                        console.log(`Waiting for ${randomInterval} milliseconds before next loop iteration`);
                        await new Promise(resolve => setTimeout(resolve, randomInterval));

                    }
                
                } else {
                    console.log(`没有找到文本为" 的链接`);
                }
            } catch (error) {
                console.error(`An error occurred while processing text":`, error);
            }
        }
    
    }
}

export async function handleEvent(event, page, browser, index, sortedData_new, task_name, cityname) {
    let task;
    console.log('task_name_1:', task_name);
    console.log('cityname_1:', cityname);
    switch (event.type) {
        case 'click':
            task = new ClickTask(event.element, index, browser,task_name, cityname);
            break;
        case 'input':
            task = new InputTask(event.element, event.value, sortedData_new);
            break;
        case 'output':
            console.log('task_name_1.2:', task_name);
            console.log('cityname_1.2:', cityname);
            task = new OutputTask(event.element, event.value, sortedData_new,task_name, cityname);
            break;
        case 'loop':
            console.log('task_name_1.3:', task_name);
            console.log('cityname_1.3:', cityname);
            const outputTask = new OutputTask({ leixing: '自定义0' }, event.value, sortedData_new, task_name, cityname);
            await outputTask.execute(page);
            const outputData = outputTask.data;  // 直接访问 data 属性
            console.log('outputData:', outputData);
            task = new LoopTask(event.loopEvents, event.loopCount, outputData);  // 传递输出数据给 LoopTask
            console.log('task_name_1.4:', task_name);
            console.log('cityname_1.4:', cityname);
            await task.execute(page, browser, index, sortedData_new, task_name,cityname,handleEvent);
            return; // LoopTask already handles the execution of nested events
        case 'scroll':
            task = new ScrollTask(event.distance, event.direction);
            break;
        case 'navigation':
            task = new NavigationTask(event.url);
            break;
        case 'keydown':
            task = new KeydownTask(event.key);
            break;
        default:
            throw new Error(`Unsupported event type: ${event.type}`);
    }

    // Execute the task and check for a new page context
    const newPage = await task.execute(page);
    console.log('newPage URL:', newPage.url());
    console.log('page URL:', page.url());
    if (newPage !== page) {
        console.log('替换 page:');
        page = newPage;
    }
    return page;
}
task_name_0: kandeng_004
leixing: undefined
config: kn8o287
config: kn8o287
查询响应: { code: 0, msg: 'success', data: { status: 'Inactive' } }
浏览器未启动，尝试启动浏览器
查询响应: { code: 0, msg: 'success', data: { status: 'Inactive' } }
浏览器未启动，尝试启动浏览器
Timeout waiting for new page
check_2
newPage: null
check_3
newPage URL: https://salecentersaas.yibainetwork.com/#/product_list
page URL: https://salecentersaas.yibainetwork.com/#/product_list
启动响应: {
  code: 0,
  msg: 'success',
  data: {
    ws: { puppeteer: '', selenium: '' },
    debug_port: '',
    webdriver: ''
  }
}
启动浏览器时出错: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
任务执行过程中发生错误: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
页面不存在，无需关闭
启动响应: {
  code: 0,
  msg: 'success',
  data: {
    ws: { puppeteer: '', selenium: '' },
    debug_port: '',
    webdriver: ''
  }
}
启动浏览器时出错: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
任务执行过程中发生错误: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
页面不存在，无需关闭
正在处理事件: {
  element: { tagName: 'SPAN', id: '', className: '', innerText: '精细刊登' },
  time: '2024-06-04T09:57:49.547Z',
  type: 'click'
}
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
page URL: https://salecentersaas.yibainetwork.com/#/product_list
clickSelector: //span[text()='精细刊登'] | //span/span[text()='精细刊登']
isXPath_click: true
leixing: undefined
check_1
Timeout waiting for new page
check_2
newPage: null
check_3
newPage URL: https://salecentersaas.yibainetwork.com/#/product_list
page URL: https://salecentersaas.yibainetwork.com/#/product_list
正在处理事件: {
  element: { tagName: 'SPAN', id: '', className: '', innerText: '下一步' },
  time: '2024-06-04T09:57:51.210Z',
  type: 'click'
}
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
page URL: https://salecentersaas.yibainetwork.com/#/product_list
clickSelector: //span[text()='下一步'] | //span/span[text()='下一步']
isXPath_click: true
leixing: undefined
check_1
Timeout waiting for new page
check_2
newPage: null
check_3
newPage URL: https://salecentersaas.yibainetwork.com/#/product_list
page URL: https://salecentersaas.yibainetwork.com/#/product_list
正在处理事件: {
  element: {
    tagName: 'INPUT',
    id: '',
    className: 'ivu-select-input',
    name: '',
    innerText: 'Ningkui',
    placeholder: '请选择',
    leixing: '自定义2'
  },
  value: '刊登店铺',
  time: '2024-06-04T09:57:54.014Z',
  type: 'click'
}
task_name_1: kandeng_004
cityname_1: Ningkui_JYB01644-01
Task task_name_0: undefined
Task cityname_0: undefined
Task task_name: undefined
Task cityname: undefined
page URL: https://salecentersaas.yibainetwork.com/#/product_list
clickSelector: //input[text()='Ningkui'] | //input/span[text()='Ningkui']
isXPath_click: true
leixing: 自定义2
dianjikaishi:
Timeout waiting for new page
开始处理任务请求
req.body.row: {
  'Unnamed: 0': null,
  task_name: 'kandeng_004',
  cityname: 'Ningkui_JYB01724',
  '刊登店铺': 'Ningkui',
  '系统SKU': 'JYB01724'
}
task_name: kandeng_004
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/taskExecutor_kandeng_004.js 已存在，不进行更新和替换
文件路径: /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js
开始处理任务请求
req.body.row: {
  'Unnamed: 0': null,
  task_name: 'kandeng_004',
  cityname: 'Ningkui_JYB01749',
  '刊登店铺': 'Ningkui',
  '系统SKU': 'JYB01749'
}
task_name: kandeng_004
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js 已存在，不进行更新和替换
importTasks called with: kandeng_004
Type of task_name: string
task_name stringified: "kandeng_004"
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/taskExecutor_kandeng_004.js 已存在，不进行更新和替换
文件路径: /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js
文件 /Users/zhanggongqing/project/smartrpa_backgroud_new/modules/eventHandler_kandeng_004.js 已存在，不进行更新和替换
importTasks called with: kandeng_004
Type of task_name: string
task_name stringified: "kandeng_004"
handleEventCode_check: 
///实现通过 e百的任务批量刊登工作流
import { ClickTask, InputTask, OutputTask, KeydownTask, NavigationTask, ScrollTask } from './taskExecutor_kandeng_004.js';

function getRandomInterval(min = 2000, max = 8000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

class LoopTask {
    constructor(loopEvents, loopCount, outputData) {
        this.loopEvents = loopEvents;
        this.outputData = outputData; 
        // this.i = i;  // 添加这一行
    }

    async execute(page, browser, index, sortedData_new, task_name, cityname, handleEvent) {

        const data = this.outputData || []; 
        for (let text of data) {
            // if (text === '西城区') {
            //     continue;
            // }
            console.log('Processing text:', text);

            try {
                // 确保页面完全加载
                await page.goto(page.url(), { waitUntil: 'load', timeout: 60000 });
                console.log('Page loaded.');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink_0 = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                if (foundLink_0) {
                    console.log('Link found for text:', text);

                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 3000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    // 获取总页数

                } else {
                    console.log(`没有找到文本为 "${text}" 的链接`);
                }
                // 等待一定时间确保页面渲染完成
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                
                console.log('page URL_check1:', page.url());
                if (foundLink) {
                    console.log('Link found for text:', text);
                    // 监听 'targetcreated' 事件
                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 5000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    const loopEvents = this.loopEvents || [];
                    console.log('task_name_1.1:', task_name);
                    console.log('cityname_1.1:', cityname);
                    page = await handleEvent(loopEvents[0], page, browser, index, sortedData_new, task_name, cityname);
                    await page.waitForSelector('.page a');
                    const totalPageNumber = await page.evaluate(() => {
                        let pageLinks = document.querySelectorAll('.page a');
                        return pageLinks.length > 0 ? parseInt(pageLinks[pageLinks.length - 2].innerText) : 1;
                    });

                    console.log('Total page number:', totalPageNumber);
                    // 获取总页数

                    // const loopCount = totalPageNumber || 1;
                    
                    // const date = new Date();
                    // const dateString = date.toISOString().replace(/:/g, '-'); // 将时间中的冒号替换为短横线，因为冒号在文件名中是非法的
                    // const filename = `output_${dateString}.xlsx`;

                    for (let i = 0; i < totalPageNumber; i++) {
                        for (const loopEvent of loopEvents) {
                            try {
                                console.log(`Executing loop event:`, loopEvent);
                                page = await handleEvent(loopEvent, page, browser, index, sortedData_new, task_name, cityname);
                            } catch (error) {
                                console.error(`An error occurred in the loop:`, error);
                            }
                        }

                        // const allHeaders = new Set();
                        // function collectHeaders(data, prefix = '') {
                        //     Object.keys(data).forEach(key => {
                        //         const fullKey = prefix ? `${prefix}_${key}` : key;
                        //         if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //             collectHeaders(data[key], fullKey);
                        //         } else {
                        //             allHeaders.add(fullKey);
                        //         }
                        //     });
                        // }


                        // // 遍历每个对象，收集所有可能的列名称
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         collectHeaders(data);
                        //     });
                        // });

                        // // 将所有列名称转换为数组
                        // const allHeadersArray = Array.from(allHeaders);

                        // // 创建一个新的工作簿和工作表
                        // const workbook = new Workbook();
                        // const worksheet = workbook.addWorksheet('Sheet1');

                        // // 添加标题行
                        // worksheet.addRow(allHeadersArray);


                        // // 增加随机时间间隔

                        // // 遍历每个对象，并构建数据行
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         const rowData = {};

                        //         function populateRowData(data, prefix = '') {
                        //             Object.keys(data).forEach(key => {
                        //                 const fullKey = prefix ? `${prefix}_${key}` : key;
                        //                 if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //                     populateRowData(data[key], fullKey);
                        //                 } else {
                        //                     rowData[fullKey] = data[key];
                        //                 }
                        //             });
                        //         }

                        //         populateRowData(data);

                        //         // 添加数据行
                        //         const row = allHeadersArray.map(header => rowData[header] || '');
                        //         worksheet.addRow(row);
                        //     });
                        // });
                        // // 写入 Excel 文件
                        // await workbook.xlsx.writeFile(filename)
                        //     .then(() => {
                        //         console.log('Excel 文件已成功创建！');
                        //     })
                        //     .catch(error => {
                        //         console.error('创建 Excel 文件时出错：', error);
                        //     });
                        // console.log('保存成功');

                        const randomInterval = getRandomInterval();
                        console.log(`Waiting for ${randomInterval} milliseconds before next loop iteration`);
                        await new Promise(resolve => setTimeout(resolve, randomInterval));

                    }
                
                } else {
                    console.log(`没有找到文本为" 的链接`);
                }
            } catch (error) {
                console.error(`An error occurred while processing text":`, error);
            }
        }
    
    }
}

export async function handleEvent(event, page, browser, index, sortedData_new, task_name, cityname) {
    let task;
    console.log('task_name_1:', task_name);
    console.log('cityname_1:', cityname);
    switch (event.type) {
        case 'click':
            task = new ClickTask(event.element, index, browser,task_name, cityname);
            break;
        case 'input':
            task = new InputTask(event.element, event.value, sortedData_new);
            break;
        case 'output':
            console.log('task_name_1.2:', task_name);
            console.log('cityname_1.2:', cityname);
            task = new OutputTask(event.element, event.value, sortedData_new,task_name, cityname);
            break;
        case 'loop':
            console.log('task_name_1.3:', task_name);
            console.log('cityname_1.3:', cityname);
            const outputTask = new OutputTask({ leixing: '自定义0' }, event.value, sortedData_new, task_name, cityname);
            await outputTask.execute(page);
            const outputData = outputTask.data;  // 直接访问 data 属性
            console.log('outputData:', outputData);
            task = new LoopTask(event.loopEvents, event.loopCount, outputData);  // 传递输出数据给 LoopTask
            console.log('task_name_1.4:', task_name);
            console.log('cityname_1.4:', cityname);
            await task.execute(page, browser, index, sortedData_new, task_name,cityname,handleEvent);
            return; // LoopTask already handles the execution of nested events
        case 'scroll':
            task = new ScrollTask(event.distance, event.direction);
            break;
        case 'navigation':
            task = new NavigationTask(event.url);
            break;
        case 'keydown':
            task = new KeydownTask(event.key);
            break;
        default:
            throw new Error(`Unsupported event type: ${event.type}`);
    }

    // Execute the task and check for a new page context
    const newPage = await task.execute(page);
    console.log('newPage URL:', newPage.url());
    console.log('page URL:', page.url());
    if (newPage !== page) {
        console.log('替换 page:');
        page = newPage;
    }
    return page;
}
task_name_0: kandeng_004
leixing: undefined
handleEventCode_check: 
///实现通过 e百的任务批量刊登工作流
import { ClickTask, InputTask, OutputTask, KeydownTask, NavigationTask, ScrollTask } from './taskExecutor_kandeng_004.js';

function getRandomInterval(min = 2000, max = 8000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

class LoopTask {
    constructor(loopEvents, loopCount, outputData) {
        this.loopEvents = loopEvents;
        this.outputData = outputData; 
        // this.i = i;  // 添加这一行
    }

    async execute(page, browser, index, sortedData_new, task_name, cityname, handleEvent) {

        const data = this.outputData || []; 
        for (let text of data) {
            // if (text === '西城区') {
            //     continue;
            // }
            console.log('Processing text:', text);

            try {
                // 确保页面完全加载
                await page.goto(page.url(), { waitUntil: 'load', timeout: 60000 });
                console.log('Page loaded.');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink_0 = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                if (foundLink_0) {
                    console.log('Link found for text:', text);

                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='行政区'] | //a[text()='行政区']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 3000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    // 获取总页数

                } else {
                    console.log(`没有找到文本为 "${text}" 的链接`);
                }
                // 等待一定时间确保页面渲染完成
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 查找元素并捕获错误
                const foundLink = await page.evaluate((text) => {
                    try {
                        let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                        let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                        let linkElement = xpathResult.singleNodeValue;
                        return linkElement !== null; // 返回是否找到链接
                    } catch (error) {
                        console.error('Error in evaluate for finding link:', error);
                        return false;
                    }
                }, text);
                
                console.log('page URL_check1:', page.url());
                if (foundLink) {
                    console.log('Link found for text:', text);
                    // 监听 'targetcreated' 事件
                    // 点击链接并等待导航完成，最多等待3秒钟
                    await Promise.race([
                        page.waitForNavigation({ waitUntil: 'networkidle0' }),
                        page.evaluate((text) => {
                            let xpath = `//a/span[text()='${text}'] | //a[text()='${text}']`;
                            let xpathResult = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                            let linkElement = xpathResult.singleNodeValue;
                            if (linkElement) {
                                linkElement.click();
                            }
                        }, text),
                        new Promise(resolve => setTimeout(resolve, 5000))
                    ]);

                    console.log('Navigation completed or timeout for text:', text);

                    const loopEvents = this.loopEvents || [];
                    console.log('task_name_1.1:', task_name);
                    console.log('cityname_1.1:', cityname);
                    page = await handleEvent(loopEvents[0], page, browser, index, sortedData_new, task_name, cityname);
                    await page.waitForSelector('.page a');
                    const totalPageNumber = await page.evaluate(() => {
                        let pageLinks = document.querySelectorAll('.page a');
                        return pageLinks.length > 0 ? parseInt(pageLinks[pageLinks.length - 2].innerText) : 1;
                    });

                    console.log('Total page number:', totalPageNumber);
                    // 获取总页数

                    // const loopCount = totalPageNumber || 1;
                    
                    // const date = new Date();
                    // const dateString = date.toISOString().replace(/:/g, '-'); // 将时间中的冒号替换为短横线，因为冒号在文件名中是非法的
                    // const filename = `output_${dateString}.xlsx`;

                    for (let i = 0; i < totalPageNumber; i++) {
                        for (const loopEvent of loopEvents) {
                            try {
                                console.log(`Executing loop event:`, loopEvent);
                                page = await handleEvent(loopEvent, page, browser, index, sortedData_new, task_name, cityname);
                            } catch (error) {
                                console.error(`An error occurred in the loop:`, error);
                            }
                        }

                        // const allHeaders = new Set();
                        // function collectHeaders(data, prefix = '') {
                        //     Object.keys(data).forEach(key => {
                        //         const fullKey = prefix ? `${prefix}_${key}` : key;
                        //         if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //             collectHeaders(data[key], fullKey);
                        //         } else {
                        //             allHeaders.add(fullKey);
                        //         }
                        //     });
                        // }


                        // // 遍历每个对象，收集所有可能的列名称
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         collectHeaders(data);
                        //     });
                        // });

                        // // 将所有列名称转换为数组
                        // const allHeadersArray = Array.from(allHeaders);

                        // // 创建一个新的工作簿和工作表
                        // const workbook = new Workbook();
                        // const worksheet = workbook.addWorksheet('Sheet1');

                        // // 添加标题行
                        // worksheet.addRow(allHeadersArray);


                        // // 增加随机时间间隔

                        // // 遍历每个对象，并构建数据行
                        // data.forEach(dataArray => {
                        //     dataArray.forEach(data => {
                        //         const rowData = {};

                        //         function populateRowData(data, prefix = '') {
                        //             Object.keys(data).forEach(key => {
                        //                 const fullKey = prefix ? `${prefix}_${key}` : key;
                        //                 if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
                        //                     populateRowData(data[key], fullKey);
                        //                 } else {
                        //                     rowData[fullKey] = data[key];
                        //                 }
                        //             });
                        //         }

                        //         populateRowData(data);

                        //         // 添加数据行
                        //         const row = allHeadersArray.map(header => rowData[header] || '');
                        //         worksheet.addRow(row);
                        //     });
                        // });
                        // // 写入 Excel 文件
                        // await workbook.xlsx.writeFile(filename)
                        //     .then(() => {
                        //         console.log('Excel 文件已成功创建！');
                        //     })
                        //     .catch(error => {
                        //         console.error('创建 Excel 文件时出错：', error);
                        //     });
                        // console.log('保存成功');

                        const randomInterval = getRandomInterval();
                        console.log(`Waiting for ${randomInterval} milliseconds before next loop iteration`);
                        await new Promise(resolve => setTimeout(resolve, randomInterval));

                    }
                
                } else {
                    console.log(`没有找到文本为" 的链接`);
                }
            } catch (error) {
                console.error(`An error occurred while processing text":`, error);
            }
        }
    
    }
}

export async function handleEvent(event, page, browser, index, sortedData_new, task_name, cityname) {
    let task;
    console.log('task_name_1:', task_name);
    console.log('cityname_1:', cityname);
    switch (event.type) {
        case 'click':
            task = new ClickTask(event.element, index, browser,task_name, cityname);
            break;
        case 'input':
            task = new InputTask(event.element, event.value, sortedData_new);
            break;
        case 'output':
            console.log('task_name_1.2:', task_name);
            console.log('cityname_1.2:', cityname);
            task = new OutputTask(event.element, event.value, sortedData_new,task_name, cityname);
            break;
        case 'loop':
            console.log('task_name_1.3:', task_name);
            console.log('cityname_1.3:', cityname);
            const outputTask = new OutputTask({ leixing: '自定义0' }, event.value, sortedData_new, task_name, cityname);
            await outputTask.execute(page);
            const outputData = outputTask.data;  // 直接访问 data 属性
            console.log('outputData:', outputData);
            task = new LoopTask(event.loopEvents, event.loopCount, outputData);  // 传递输出数据给 LoopTask
            console.log('task_name_1.4:', task_name);
            console.log('cityname_1.4:', cityname);
            await task.execute(page, browser, index, sortedData_new, task_name,cityname,handleEvent);
            return; // LoopTask already handles the execution of nested events
        case 'scroll':
            task = new ScrollTask(event.distance, event.direction);
            break;
        case 'navigation':
            task = new NavigationTask(event.url);
            break;
        case 'keydown':
            task = new KeydownTask(event.key);
            break;
        default:
            throw new Error(`Unsupported event type: ${event.type}`);
    }

    // Execute the task and check for a new page context
    const newPage = await task.execute(page);
    console.log('newPage URL:', newPage.url());
    console.log('page URL:', page.url());
    if (newPage !== page) {
        console.log('替换 page:');
        page = newPage;
    }
    return page;
}
task_name_0: kandeng_004
leixing: undefined
config: kn8o287
config: kn8o287
查询响应: { code: 0, msg: 'success', data: { status: 'Inactive' } }
浏览器未启动，尝试启动浏览器
查询响应: { code: 0, msg: 'success', data: { status: 'Inactive' } }
浏览器未启动，尝试启动浏览器
启动响应: {
  code: 0,
  msg: 'success',
  data: {
    ws: { puppeteer: '', selenium: '' },
    debug_port: '',
    webdriver: ''
  }
}
启动浏览器时出错: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
任务执行过程中发生错误: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
页面不存在，无需关闭
启动响应: {
  code: 0,
  msg: 'success',
  data: {
    ws: { puppeteer: '', selenium: '' },
    debug_port: '',
    webdriver: ''
  }
}
启动浏览器时出错: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
任务执行过程中发生错误: Error: AdsPower启动浏览器失败
    at launchBrowser_adsPower_lianjie_local (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/modules/puppeteerManager.js:438:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async handler_run (file:///Users/zhanggongqing/project/smartrpa_backgroud_new/handler.js:1079:19)
页面不存在，无需关闭
